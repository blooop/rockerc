#This file was autogenerated by worktree_docker
# Preamble from extension [git]

# Preamble from extension [nvidia]
# Ubuntu 16.04 with nvidia-docker2 beta opengl support
FROM nvidia/opengl:1.0-glvnd-devel-ubuntu18.04 as glvnd

# Preamble from extension [deps]

# Preamble from extension [pixi]

# Preamble from extension [user]

# Preamble from extension [x11]


FROM ubuntu:22.04
USER root
# Snippet from extension [git]

# Snippet from extension [nvidia]
RUN apt-get update && apt-get install -y --no-install-recommends \
    libglvnd0 \
    libgl1 \
    libglx0 \
    libegl1 \
    libgles2 \
    && rm -rf /var/lib/apt/lists/*
COPY --from=glvnd /usr/share/glvnd/egl_vendor.d/10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json




ENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:-all}

# Snippet from extension [deps]
# INSTALLING APT DEPS: tools
RUN apt-get update && apt-get install -y --no-install-recommends \
        git \
        git-lfs \
        jq \
        python3-pip \
        && apt-get clean && rm -rf /var/lib/apt/lists/*

# INSTALLING PIP DEPS: language-toolchain
RUN pip3 install -U \
    hatch \
    pip \
    twine \
    uv \
    && echo "pip"

# Snippet from extension [pixi]
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
# Snippet from extension [user]
# make sure sudo is installed to be able to give user sudo access in docker
RUN if ! command -v sudo >/dev/null; then \
      apt-get update \
      && apt-get install -y sudo \
      && apt-get clean; \
    fi

RUN existing_user_by_uid=`getent passwd "1000" | cut -f1 -d: || true` && \
    if [ -n "${existing_user_by_uid}" ]; then userdel -r "${existing_user_by_uid}"; fi && \
    existing_user_by_name=`getent passwd "ags" | cut -f1 -d: || true` && \
    existing_user_uid=`getent passwd "ags" | cut -f3 -d: || true` && \
    if [ -n "${existing_user_by_name}" ]; then find / -uid ${existing_user_uid} -exec chown -h 1000 {} + || true ; find / -gid ${existing_user_uid} -exec chgrp -h 1000 {} + || true ; fi && \
    if [ -n "${existing_user_by_name}" ]; then userdel -r "${existing_user_by_name}"; fi && \
    existing_group_by_gid=`getent group "1000" | cut -f1 -d: || true` && \
    if [ -z "${existing_group_by_gid}" ]; then \
      groupadd -g "1000" "ags"; \
    fi && \
    useradd --no-log-init --no-create-home --uid "1000" -s /bin/bash -c "austin,,," -g "1000" -d "/home/ags" "ags" && \
    echo "ags ALL=NOPASSWD: ALL" >> /etc/sudoers.d/rocker

# Making sure a home directory exists if we haven't mounted the user's home directory explicitly
RUN mkdir -p "$(dirname "/home/ags")" && mkhomedir_helper ags
WORKDIR /home/ags

# Snippet from extension [x11]

USER ags
# User Snippet from extension [git]

# User Snippet from extension [nvidia]

# User Snippet from extension [deps]

# User Snippet from extension [pixi]
RUN curl -fsSL https://pixi.sh/install.sh | bash
RUN echo 'eval "$(pixi completion --shell bash)"' >> ~/.bashrc
# User Snippet from extension [user]

# User Snippet from extension [x11]